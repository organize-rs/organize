# Rules you can define for organize to execute
rules:
  # name of a single rule [any string]
  - name: Empty File
    # tags that you can give a rule
    # you can execute a single rule from a config file
    # by calling e.g. `organize run config --path <path to config> --tags Test::EmptyFile,Test::EmptyFolder`
    # enabling and disabling a single rule [true, false]
    enabled: true
    # the locations organize will apply the filters to
    locations:
      # `locations` is a list where each item is either
      # [!recursive, !non_recursive, !default_settings]
      - !recursive
        path: crates\organize-rs_core\tests\fixtures\filters\empty_file
        # depth for this location, seen from `path`
        # how deep organize should traverse the file system
        max_depth: 1
        # target kind, to what organize should apply the filters
        # to in this location, can be either [files, folders, both]
        target: files
    # filter groups is a [list] that `organize`` operates with
    # each filter group itself can contain one or more filters
    filter_groups:
      # a single filter_group
      - filters:
          - empty
        # the whole filter_group can be excluded or included into
        # the result set [include, exclude]
        results: include
        # how the filter_group should be applied to the results
        # can be either [all, any, none]
        match: all
    # actions that organize can apply to matched result entries
    actions:
      # an action can either be run in `!preview` or `!destructive` mode
      # `!preview` will give a brief overview of what consequences an
      # applied action will have without making any changes to the file
      # system
      # `!destructive` will run an action destructively, it will
      # ask though to confirm some actions, e.g. when conflicts are
      # existing and we are unsure how to continue
      - !preview trash
    # you can assign a [list] of tags to a rule, so you can
    # run a single rule from a [list] of rules that a config file
    # can contain
    tags:
      # tags is a [list] containing of either [!custom, !always_run, !never_run]:
      # `!custom xyz` followed by a string that represents the tag
      # `!always_run` hardcoded tag to always run this rule
      # `!never_run` hardcoded tag to never run this rule
      - !custom Test::EmptyFile
